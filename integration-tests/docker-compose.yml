version: "3.7"
x-environment:
  &COMMON_ENVIRONMENT
  ALLOW_DROP_DATA: "True"
  ENVIRONMENT: DEVELOPMENT
  PROXY_URL: http://localhost
  HS_ISSUER: http://localhost/
  HS_KEY: secret
  AUTH0_MGMT_CLIENT_ID: "doesnotmatter"
  AUTH0_MGMT_CLIENT_SECRET: "shhh"
  AUTH0_AUTHZ_CLIENT_ID: "doesnotmatter"
  AUTH0_AUTHZ_CLIENT_SECRET: "shhh"
  AUTH0_AUTHZ_WEBTASK_URL: "doesnotmatter"
  AUTH0_CLIENT_ID: "doesnotmatter"
  AUTH0_AUDIENCE: "http://localhost/"
  NONCUSTOM_AUTH0_DOMAIN: "https://integration-tests"
  AUTH0_CUSTOM_DOMAIN: "dev"
  DISABLE_CREATE_USER_IN_AUTH0: "True"
  AUTH0_HS_KEY: "secret"
  DATABASE_HOST: postgres-db
  DATABASE_PORT: 5432
  DATABASE_USER: postgres-user
  DATABASE_PASSWORD: TopSecretPassword
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_PASSWORD: any
  CUSTOMER_CODE: DEV
  LOG_LEVEL: DEBUG
  LOG_FORMAT: COLOUR

services:
  dhos-locations-integration-tests:
    container_name: "dhos-locations-integration-tests"
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      <<: *COMMON_ENVIRONMENT
      BEHAVE_ARGS: ${BEHAVE_ARGS:-}
      SYSTEM_JWT_SCOPE: >-
        read:send_location read:gdm_location read:gdm_location_all
        write:send_location write:gdm_location write:gdm_location_all
    command: >-
      bash -c "behave --no-capture --no-logcapture ${BEHAVE_ARGS:-}"
    depends_on:
      "dhos-locations-api":
        condition: service_healthy

  dhos-locations-api:
    container_name: "dhos-locations-api"
    build:
      context: ..
    environment:
      <<: *COMMON_ENVIRONMENT
      DATABASE_NAME: dhos-locations-api-db
      EXTERNAL_URL: http://dhos-locations-api:5000
    command: >-
      bash -c "flask db upgrade
      && python -m dhos_locations_api"
    healthcheck:
      test: curl -f http://localhost:5000/running || false
      interval: 3s
      retries: 40
      start_period: 10s
    depends_on:
      "postgres-db":
        condition: service_healthy
    ports:
      - "5000:5000"

  postgres-db:
    container_name: "postgres-db"
    build:
      context: ./postgres-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 2s
      timeout: 5s
      retries: 20
    environment:
      - POSTGRES_USER=postgres-user
      - POSTGRES_PASSWORD=TopSecretPassword
      - POSTGRES_MULTIPLE_DATABASES="dhos-locations-api-db"
